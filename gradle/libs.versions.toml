[versions]
# plugins
androidGradlePlugin = "8.3.2"  # 8.3.2-Iguana Patch 2
kotlin = "1.9.23"  # Compose Compiler 1.5.11 requires Kotlin 1.9.23
googleKsp = "1.9.23-1.0.20"
googlePlayServicesOSSLicensesPlugin = "0.10.6"

kotlinCoroutines = "1.8.0"

androidxTestCore = "1.5.0"
androidxTestRunner = "1.5.2"
androidxTestExtJunit = "1.1.5"
androidxTestEspresso = "3.5.1"

androidxCore = "1.12.0"
androidxCoreSplashScreen = "1.1.0-alpha02"
androidxComposeCompiler = "1.5.11"
androidxComposeBom = "2024.04.00"
androidxActivity = "1.8.2"
androidxAppcompat = "1.6.1"
androidxLifecycle = "2.7.0"
androidxRoom = "2.6.0"
androidxNavigation = "2.6.0"
androidxCoreTesting = "2.2.0"
androidxFragment = "1.6.2"
androidxWindow = "1.2.0"
androidxDrawerLayout = "1.2.0"
androidxSwipeRefreshLayout = "1.1.0"
androidxConstraintLayout = "2.1.4"
androidxConstraintLayoutCompose = "1.0.1"
androidxPalette = "1.0.0"
androidxCardView = "1.0.0"
androidxRecyclerView = "1.3.2"
androidxHeifWriter = "1.0.0"
androidxViewPager = "1.0.0"
androidxPaging = "3.1.1"
androidxPreference = "1.2.1"
androidxWork = "2.8.1"
androidxDocumentFile = "1.0.1"

# This dependency is for the Wear UI Library,
# which has classes that exemplify best practices
androidxWear = "1.3.0"

googleTruth = "1.1.3"
googleMaterialComponents = "1.11.0"
googlePlayServicesOSSLicenses = "17.0.0"
googlePlayServicesBasement = "18.2.0"
googleGson = "2.10.1"
googlePlayFeatureDelivery = "2.1.0"
googlePlayFeatureDeliveryKtx = "2.1.0"
gglGuava = "31.0.1-android"
# This dependency is set to compile only
googleWearable = "2.9.0"
okhttp = "4.12.0"
coil = "2.6.0"
junit4 = "4.13.2"
junitJupiter = "5.8.1"
mpChart = "v3.1.0"
openCsv = "5.7.1"
rxJava = "3.1.8"
# Jetbrains annotations
jbAnnotations = "24.0.0"
androidDeviceNames = "2.1.1"
byteBuddy = "1.12.22"
androidDesugaring = "2.0.3"
mockito = "5.1.1"
appIconLoader = "1.5.0"
# Superellipse shape for Compose
smoothCornerCompose = "v1.0.0"
libCheckerRules = "35.3"
googleSmali = "3.0.5"
ldapsdk = "6.0.11"

[libraries]
androidxTestCore = { module = "androidx.test:core", version.ref = "androidxTestCore" }
androidxTestRunner = { module = "androidx.test:runner", version.ref = "androidxTestRunner" }
androidxTestExtJunit = { module = "androidx.test.ext:junit", version.ref = "androidxTestExtJunit" }
androidxTestEspresso = { module = "androidx.test.espresso:espresso-core", version.ref = "androidxTestEspresso" }

androidxCore = { module = "androidx.core:core", version.ref = "androidxCore" }
androidxCoreKtx = { module = "androidx.core:core-ktx", version.ref = "androidxCore" }
androidxCoreSplashScreen = { module = "androidx.core:core-splashscreen", version.ref = "androidxCoreSplashScreen" }
androidxComposeBom = { module = "androidx.compose:compose-bom", version.ref = "androidxComposeBom" }
androidxComposeRuntimeLiveData = { module = "androidx.compose.runtime:runtime-livedata" }
androidxComposeFoundation = { module = "androidx.compose.foundation:foundation" }
androidxComposeUi = { module = "androidx.compose.ui:ui" }
# Integration with activities
androidxComposeActivity = { module = "androidx.activity:activity-compose", version.ref = "androidxActivity" }
# Compose Material Design
androidxComposeMaterial3 = { module = "androidx.compose.material3:material3" }
androidxComposeMaterialIcons = { module = "androidx.compose.material:material" }
androidxComposeMaterialIconsExtended = { module = "androidx.compose.material:material-icons-extended" }
androidxComposeAnimation = { module = "androidx.compose.animation:animation" }
# Tooling support (Previews, etc.)
androidxComposeUiTooling = { module = "androidx.compose.ui:ui-tooling" }
# Integration with ViewModels
androidxComposeViewModel = { module = "androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "androidxLifecycle" }
androidxComposeUiTest = { module = "androidx.compose.ui:ui-test-junit4" }
androidxActivity = { module = "androidx.activity:activity-ktx", version.ref = "androidxActivity" }
androidxAppcompat = { module = "androidx.appcompat:appcompat", version.ref = "androidxAppcompat" }
androidxFragment = { module = "androidx.fragment:fragment-ktx", version.ref = "androidxFragment" }
androidxWindow = { module = "androidx.window:window", version.ref = "androidxWindow" }
androidxDrawerLayout = { module = "androidx.drawerlayout:drawerlayout", version.ref = "androidxDrawerLayout" }
androidxSwipeRefreshLayout = { module = "androidx.swiperefreshlayout:swiperefreshlayout", version.ref = "androidxSwipeRefreshLayout" }
androidxConstraintLayout = { module = "androidx.constraintlayout:constraintlayout", version.ref = "androidxConstraintLayout" }
androidxConstraintLayoutCompose = { module = "androidx.constraintlayout:constraintlayout-compose", version.ref = "androidxConstraintLayoutCompose" }
androidxPalette = { module = "androidx.palette:palette", version.ref = "androidxPalette" }
androidxCardView = { module = "androidx.cardview:cardview", version.ref = "androidxCardView" }
androidxRecyclerView = { module = "androidx.recyclerview:recyclerview", version.ref = "androidxRecyclerView" }
androidxHeifWriter = { module = "androidx.heifwriter:heifwriter", version.ref = "androidxHeifWriter" }
androidxViewPager = { module = "androidx.viewpager2:viewpager2", version.ref = "androidxViewPager" }
androidxDocumentFile = { module = "androidx.documentfile:documentfile", version.ref = "androidxDocumentFile" }

androidxLifecycleRuntime = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "androidxLifecycle" }
androidxLifecycleCommon = { module = "androidx.lifecycle:lifecycle-common", version.ref = "androidxLifecycle" }
androidxLifecycleViewModel = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "androidxLifecycle" }
androidxLifecycleLiveData = { module = "androidx.lifecycle:lifecycle-livedata-ktx", version.ref = "androidxLifecycle" }
androidxCoreTesting = { module = "androidx.arch.core:core-testing", version.ref = "androidxCoreTesting" }
androidxRoomRuntime = { module = "androidx.room:room-runtime", version.ref = "androidxRoom" }
androidxRoomCompiler = { module = "androidx.room:room-compiler", version.ref = "androidxRoom" }
androidxRoom = { module = "androidx.room:room-ktx", version.ref = "androidxRoom" }
androidxRoomTesting = { module = "androidx.room:room-testing", version.ref = "androidxRoom" }
androidxPaging = { module = "androidx.paging:paging-runtime-ktx", version.ref = "androidxPaging" }
androidxPreference = { module = "androidx.preference:preference-ktx", version.ref = "androidxPreference" }
androidxNavigationFragment = { module = "androidx.navigation:navigation-fragment-ktx", version.ref = "androidxNavigation" }
androidxNavigationUI = { module = "androidx.navigation:navigation-ui-ktx", version.ref = "androidxNavigation" }
androidxNavigationTesting = { module = "androidx.navigation:navigation-testing", version.ref = "androidxNavigation" }

androidxWorkRuntime = { module = "androidx.work:work-runtime-ktx", version.ref = "androidxWork" }
androidxWorkTesting = { module = "androidx.work:work-testing", version.ref = "androidxWork" }
# optional - Firebase JobDispatcher support
androidxWorkFirebase = { module = "androidx.work:work-firebase", version.ref = "androidxWork" }

googleMaterialComponents = { module = "com.google.android.material:material", version.ref = "googleMaterialComponents" }
googlePlayServicesOSSLicenses = { module = "com.google.android.gms:play-services-oss-licenses", version.ref = "googlePlayServicesOSSLicenses" }
googlePlayServicesBasement = { module = "com.google.android.gms:play-services-basement", version.ref = "googlePlayServicesBasement" }
okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
coil = { module = "io.coil-kt:coil", version.ref = "coil" }
coilCompose = { module = "io.coil-kt:coil-compose", version.ref = "coil" }
kotlinStdlib = { module = "org.jetbrains.kotlin:kotlin-stdlib", version.ref = "kotlin" }
kotlinReflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }
kotlinCoroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "kotlinCoroutines" }
androidDesugaring = { module = "com.android.tools:desugar_jdk_libs", version.ref = "androidDesugaring" }

googleTruth = { module = "com.google.truth:truth", version.ref = "googleTruth" }
googleTruthExtensions = { module = "com.google.truth.extensions:truth-java8-extension", version.ref = "googleTruth" }
googleGson = { module = "com.google.code.gson:gson", version.ref = "googleGson" }
googlePlayFeatureDelivery = { module = "com.google.android.play:feature-delivery", version.ref = "googlePlayFeatureDelivery" }
googlePlayFeatureDeliveryKtx = { module = "com.google.android.play:feature-delivery-ktx", version.ref = "googlePlayFeatureDeliveryKtx" }
gglGuava = { module = "com.google.guava:guava", version.ref = "gglGuava" }
junit4 = { module = "junit:junit", version.ref = "junit4" }
junitJupiter = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junitJupiter" }
mpChart = { module = "com.github.PhilJay:MPAndroidChart", version.ref = "mpChart" }
openCsv = { module = "com.opencsv:opencsv", version.ref = "openCsv" }
rxJava = { module = "io.reactivex.rxjava3:rxjava", version.ref = "rxJava" }
jbAnnotations = { module = "org.jetbrains:annotations", version.ref = "jbAnnotations" }
androidDeviceNames = { module = "com.jaredrummler:android-device-names", version.ref = "androidDeviceNames" }
byteBuddy = { module = "net.bytebuddy:byte-buddy-android", version.ref = "byteBuddy" }
mockito = { module = "org.mockito:mockito-android", version.ref = "mockito" }
appIconLoader = { module = "me.zhanghai.android.appiconloader:appiconloader-iconloaderlib", version.ref = "appIconLoader" }
smoothCornerCompose = { module = "com.github.racra:smooth-corner-rect-android-compose", version.ref = "smoothCornerCompose" }
libCheckerRules = { module = "com.github.LibChecker:LibChecker-Rules-Bundle", version.ref = "libCheckerRules" }
google-smali = { module = "com.android.tools.smali:smali-dexlib2", version.ref = "googleSmali" }
# resolve distinguished names from X.509 cert
ldapsdk = { module = "com.unboundid:unboundid-ldapsdk", version.ref = "ldapsdk" }

# wear
androidxWear = { module = "androidx.wear:wear", version.ref = "androidxWear" }
# Ambient mode support is provided by this dependency
googleWearable = { module = "com.google.android.wearable:wearable", version.ref = "googleWearable" }

[plugins]
android = { id = "com.android.application", version.ref = "androidGradlePlugin" }
android-dynamic-feature = { id = "com.android.dynamic-feature", version.ref = "androidGradlePlugin" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
google-ksp = { id = "com.google.devtools.ksp", version.ref = "googleKsp" }
google-gms-licenses = { id = "com.google.android.gms.oss-licenses-plugin", version.ref = "googlePlayServicesOSSLicensesPlugin" }
room = { id = "androidx.room", version.ref = "androidxRoom" }

[bundles]
dynamicFeatureBasics = [
    "androidxCore",
    "androidxCoreKtx",
    "androidxComposeRuntimeLiveData",
    "androidxComposeFoundation",
    "androidxComposeUi",
    "androidxComposeActivity",
    "androidxComposeMaterial3",
    "androidxComposeMaterialIcons",
    "androidxComposeMaterialIconsExtended",
    "androidxComposeAnimation",
    "androidxComposeUiTooling",
    "androidxComposeViewModel",
    "androidxComposeUiTest",
    "androidxActivity",
    "androidxAppcompat",
    "androidxFragment",
    "androidxConstraintLayout",
    "androidxLifecycleRuntime",
    "androidxLifecycleCommon",
    "androidxLifecycleViewModel",
    "androidxLifecycleLiveData",
    "googleMaterialComponents",
    "googlePlayFeatureDelivery",
    "googlePlayFeatureDeliveryKtx",
    "gglGuava",
    "jbAnnotations",
    "okhttp",
    "coil",
    "coilCompose",
]